{"version":3,"sources":["../../../src/db/models/User.js"],"names":["Schema","mongoose","User","email","String","password","username","createdAt","type","Date","default","now","updatedAt","social","google","id","accessToken","facebook","encryptPassword","crypto","createHmac","config","hashSecret","update","digest","statics","localSignup","user","save","findByEmail","findOne","exec","methods","verifyPassword","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;IACQA,M,GAAWC,kB,CAAXD,M;;;AAER,IAAME,OAAO,IAAIF,MAAJ,CAAW;AACpBG,WAAOC,MADa;AAEpBC,cAAUD,MAFU;AAGpBE,cAAUF,MAHU;AAIpBG,eAAW;AACPC,cAAMC,IADC;AAEPC,iBAAUD,KAAKE;AAFR,KAJS;AAQpBC,eAAW;AACPJ,cAAMC,IADC;AAEPC,iBAASD,KAAKE;AAFP,KARS;AAYpBE,YAAQ;AACJC,gBAAQ;AACJC,gBAAIX,MADA;AAEJY,yBAAaZ;AAFT,SADJ;AAKJa,kBAAU;AACNF,gBAAIX,MADE;AAENY,yBAAaZ;AAFP;AALN;AAZY,CAAX,CAAb;;AAwBA,IAAMc,kBAAkB,SAAlBA,eAAkB,WAAY;AAChC,WAAOC,iBAAOC,UAAP,CAAkB,QAAlB,EAA4BC,iBAAOC,UAAnC,EAA+CC,MAA/C,CAAsDlB,QAAtD,EAAgEmB,MAAhE,CAAuE,KAAvE,CAAP;AACH,CAFD;;AAIAtB,KAAKuB,OAAL,CAAaC,WAAb,GAA2B,gBAIxB;AAAA,QAHCvB,KAGD,QAHCA,KAGD;AAAA,QAFCE,QAED,QAFCA,QAED;AAAA,QADCC,QACD,QADCA,QACD;;AACC,QAAIqB,OAAO,IAAI,IAAJ,CAAS;AAChBxB,oBADgB;AAEhBE,kBAAUa,gBAAgBb,QAAhB,CAFM;AAGhBC;AAHgB,KAAT,CAAX;;AAMA,WAAOqB,KAAKC,IAAL,EAAP;AACH,CAZD;;AAcA1B,KAAKuB,OAAL,CAAaI,WAAb,GAA2B,UAAS1B,KAAT,EAAgB;AACvC,WAAO,KAAK2B,OAAL,CAAa,EAAC3B,YAAD,EAAb,EAAsB4B,IAAtB,EAAP;AACH,CAFD;;AAIA7B,KAAK8B,OAAL,CAAaC,cAAb,GAA8B,UAAS5B,QAAT,EAAmB;AAC7C,WAAO,KAAKA,QAAL,IAAiBa,gBAAgBb,QAAhB,CAAxB;AACH,CAFD;;kBAKeJ,mBAASiC,KAAT,CAAe,MAAf,EAAuBhC,IAAvB,C","file":"User.js","sourcesContent":["import mongoose from 'mongoose';\nimport crypto from 'crypto';\nimport config from 'config';\nconst { Schema } = mongoose;\n\nconst User = new Schema({\n    email: String,\n    password: String,\n    username: String,\n    createdAt: {\n        type: Date,\n        default : Date.now\n    },\n    updatedAt: {\n        type: Date,\n        default: Date.now    \n    },\n    social: {\n        google: {\n            id: String,\n            accessToken: String    \n        },\n        facebook: {\n            id: String,\n            accessToken: String \n        }\n    }\n});\n\nconst encryptPassword = password => {\n    return crypto.createHmac('sha256', config.hashSecret).update(password).digest('hex');\n};\n\nUser.statics.localSignup = function({\n    email, \n    password,\n    username\n}) {\n    let user = new this({\n        email,\n        password: encryptPassword(password),\n        username\n    });\n    \n    return user.save();\n};\n\nUser.statics.findByEmail = function(email) {\n    return this.findOne({email}).exec();\n};\n\nUser.methods.verifyPassword = function(password) {\n    return this.password == encryptPassword(password);\n};\n\n\nexport default mongoose.model('User', User);"]}